"""Initial migration

Revision ID: 25659351606b
Revises: 
Create Date: 2021-04-23 19:29:16.510076

"""
from alembic import op
import sqlalchemy as sa

import column

# revision identifiers, used by Alembic.
revision = '25659351606b'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pseudonym', sa.Integer(), nullable=True, comment='Pseudonym identifier, for account reference by 3rd parties'),
    sa.Column('created_on', column.DateTime(), nullable=True),
    sa.Column('activated_on', column.DateTime(), nullable=True, comment='Time at which the activation token is used to active the account'),
    sa.Column('activation_token', sa.Text(), nullable=True, comment='Unique, random token to identify the account during activation'),
    sa.Column('session_token_hash', sa.Text(), nullable=True, comment='Hash of random, long-lived token to identify the app session for this account'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('activation_token'),
    sa.UniqueConstraint('pseudonym')
    )
    op.create_index(op.f('ix_account_id'), 'account', ['id'], unique=False)
    op.create_table('device_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('installation_manual_url', sa.Text(), nullable=True, comment='URL to manual with installation instructions'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('property',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.Column('unit', sa.Text(), nullable=True, comment='Unit of property (if any), as defined by the International System of Units'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_property_id'), 'property', ['id'], unique=False)
    op.create_table('building',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.Column('longitude', sa.Numeric(precision=15, scale=10), nullable=True, comment='Coarse-grained longitude, for approximate location indication'),
    sa.Column('latitude', sa.Numeric(precision=15, scale=10), nullable=True, comment='Coarse-grained latitude, for approximate location indication'),
    sa.Column('tz_name', sa.Text(), nullable=True, comment='Time zone name, in the IANA timezone database format'),
    sa.Column('yr_built', sa.Text(), nullable=True, comment='Year built ("oorspronkelijk bouwjaar")'),
    sa.Column('type', sa.Text(), nullable=True, comment='House type ("woningtype")'),
    sa.Column('floor_area', sa.Integer(), nullable=True, comment='Floor area ("gebruiksoppervlakte"), as defined in NEN NTA 8800'),
    sa.Column('heat_loss_area', sa.Integer(), nullable=True, comment='Heat loss area ("verliesoppervlakte"), as defined in NEN NTA 8800'),
    sa.Column('energy_label', sa.Text(), nullable=True, comment='Energy label, as defined in NEN NTA 8800'),
    sa.Column('energy_index', sa.Float(), nullable=True, comment='Energy index, as defined in NEN NTA 8800'),
    sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_building_id'), 'building', ['id'], unique=False)
    op.create_table('device_type_property',
    sa.Column('device_type_id', sa.Integer(), nullable=True),
    sa.Column('property_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['device_type_id'], ['device_type.id'], ),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], )
    )
    op.create_table('device',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_type_id', sa.Integer(), nullable=True),
    sa.Column('building_id', sa.Integer(), nullable=True),
    sa.Column('proof_of_presence_id', sa.Text(), nullable=True, comment='Unique, random token to identify the device during activation'),
    sa.Column('session_token_hash', sa.Text(), nullable=True, comment='Hash of random, long-lived token to identify the device session, after activation'),
    sa.Column('created_on', column.DateTime(), nullable=True),
    sa.Column('activated_on', column.DateTime(), nullable=True, comment='Time at which the proof-of-presence id is used to active the device'),
    sa.ForeignKeyConstraint(['building_id'], ['building.id'], ),
    sa.ForeignKeyConstraint(['device_type_id'], ['device_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('proof_of_presence_id')
    )
    op.create_index(op.f('ix_device_id'), 'device', ['id'], unique=False)
    op.create_table('upload',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.Integer(), nullable=True),
    sa.Column('server_time', column.DateTime(), nullable=True, comment='Upload time, as reported by the (receiving) server'),
    sa.Column('device_time', column.DateTime(), nullable=True, comment='Upload time, as reported by the (sending) device'),
    sa.Column('size', sa.Integer(), nullable=True, comment='Size of upload payload, in bytes'),
    sa.ForeignKeyConstraint(['device_id'], ['device.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_upload_id'), 'upload', ['id'], unique=False)
    op.create_table('measurement',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('device_id', sa.Integer(), nullable=True),
    sa.Column('property_id', sa.Integer(), nullable=True),
    sa.Column('upload_id', sa.Integer(), nullable=True),
    sa.Column('timestamp', column.DateTime(), nullable=True, comment='Time of measurement, as reported by the device'),
    sa.Column('value', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['device.id'], ),
    sa.ForeignKeyConstraint(['property_id'], ['property.id'], ),
    sa.ForeignKeyConstraint(['upload_id'], ['upload.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_measurement_id'), 'measurement', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_measurement_id'), table_name='measurement')
    op.drop_table('measurement')
    op.drop_index(op.f('ix_upload_id'), table_name='upload')
    op.drop_table('upload')
    op.drop_index(op.f('ix_device_id'), table_name='device')
    op.drop_table('device')
    op.drop_table('device_type_property')
    op.drop_index(op.f('ix_building_id'), table_name='building')
    op.drop_table('building')
    op.drop_index(op.f('ix_property_id'), table_name='property')
    op.drop_table('property')
    op.drop_table('device_type')
    op.drop_index(op.f('ix_account_id'), table_name='account')
    op.drop_table('account')
    # ### end Alembic commands ###
